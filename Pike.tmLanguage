<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
	<dict>
		<key>fileTypes</key>
		<array>
			<string>pike</string>
			<string>pmod</string>
    </array>
		<key>firstLineMatch</key>
		<string>(-[*]-( [Mm]ode:)? [Pp]ike -[*]-|^#!/.*\bpike\b)</string>
		<key>foldingStartMarker</key>
		<string>(?x)
     /\*\*(?!\*)
    |^(?![^{]*?//|[^{]*?/\*(?!.*?\*/.*?\{)).*?
    \{\s*($|//|/\*(?!.*?\*/.*\S))</string>
		<key>foldingStopMarker</key>
		<string>(?&lt;!\*)\n\*\*/|^\s*\}</string>
		<key>keyEquivalent</key>
		<string>^~C</string>
		<key>name</key>
		<string>Pike</string>
		<key>patterns</key>
		<array>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-enabled</string>
      </dict>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-disabled</string>
      </dict>
			<dict>
				<key>include</key>
				<string>#preprocessor-rule-other</string>
      </dict>
			<dict>
				<key>include</key>
				<string>#comments</string>
      </dict>
			<dict>
				<key>comment</key>
				<string>Control flow keywords</string>
				<key>match</key>
				<string>\b(if|else|while|for|foreach|do|return|continue|break|switch|case|default|goto|catch|lambda|gauge|inherit|import)\b</string>
				<key>name</key>
				<string>keyword.control.pike</string>
      </dict>
			<dict>
				<key>match</key>
				<string>\b(enum|float|int|typedef|void|object|class|mapping|string|array|multiset|mixed|function|program)\b</string>
				<key>name</key>
				<string>storage.type.pike</string>
      </dict>
			<dict>
				<key>comment</key>
				<string>Modifiers</string>
				<key>match</key>
				<string>\b(public|protected|private|static|constant|local|final)\b</string>
				<key>name</key>
				<string>storage.modifier.pike</string>
      </dict>
			<dict>
				<key>comment</key>
				<string>Numeric values</string>
				<key>match</key>
				<string>(?:\b|(?&lt;!\.)(?=\.))((0(x|X)[0-9a-fA-F]*)|(0(b|B)[01]+)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b</string>
				<key>name</key>
				<string>constant.numeric.pike</string>
      </dict>
			<dict>
				<key>comment</key>
				<string>Language constants</string>
				<key>match</key>
				<string>\b(UNDEFINED|__LINE__|__FILE__|__DIR__|__VERSION__|__MAJOR__|__MINOR__|__BUILD__|__REAL_VERSION__|__REAL_MAJOR__|__REAL_MINOR__|__REAL_BUILD__|__DATE__|__TIME__|__AUTO_BIGNUM__|__NT__|__PIKE__|__amigaos__|true|false|this|this_program)\b</string>
				<key>name</key>
				<string>constant.language.pike</string>
      </dict>
			<dict>
				<key>begin</key>
				<string>"</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.begin.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>"</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.end.pike</string>
          </dict>
        </dict>
				<key>name</key>
				<string>string.quoted.double.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#string_escaped_char</string>
          </dict>
					<dict>
						<key>include</key>
						<string>#string_placeholder</string>
          </dict>
        </array>
      </dict>
			<dict>
				<key>begin</key>
				<string>'</string>
				<key>beginCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.begin.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>'</string>
				<key>endCaptures</key>
				<dict>
					<key>0</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.string.end.pike</string>
          </dict>
        </dict>
				<key>name</key>
				<string>string.quoted.single.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#string_escaped_char</string>
          </dict>
        </array>
      </dict>
			<dict>
				<key>begin</key>
				<string>(?x)
                 ^\s*\#\s*(define)\s+           # define
                 ((?&lt;id&gt;[a-zA-Z_][a-zA-Z0-9_]*))    # macro name
                 (?:                                # and optionally:
                   (\()                            # an open parenthesis
                     (
                       \s* \g&lt;id&gt; \s*            # first argument
                       ((,) \s* \g&lt;id&gt; \s*)*     # additional arguments
                       (?:\.\.\.)?               # varargs ellipsis?
                     )
                   (\))                             # a close parenthesis
                 )?</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.define.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>entity.name.function.preprocessor.pike</string>
          </dict>
					<key>4</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.parameters.pike</string>
          </dict>
					<key>5</key>
					<dict>
						<key>name</key>
						<string>variable.parameter.preprocessor.pike</string>
          </dict>
					<key>7</key>
					<dict>
						<key>name</key>
						<string>punctuation.separator.parameters.pike</string>
          </dict>
					<key>8</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.parameters.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>(?=(?://|/\*))|$</string>
				<key>name</key>
				<string>meta.preprocessor.macro.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?&gt;\\\s*\n)</string>
						<key>name</key>
						<string>punctuation.separator.continuation.pike</string>
          </dict>
					<dict>
						<key>include</key>
						<string>$base</string>
          </dict>
        </array>
      </dict>
			<dict>
				<key>begin</key>
				<string>^\s*#\s*(error|warning)\b</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.error.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>$</string>
				<key>name</key>
				<string>meta.preprocessor.diagnostic.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?&gt;\\\s*\n)</string>
						<key>name</key>
						<string>punctuation.separator.continuation.pike</string>
          </dict>
        </array>
      </dict>
			<dict>
				<key>begin</key>
				<string>^\s*#\s*(include|string)\b</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.include.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>(?=(?://|/\*))|$</string>
				<key>name</key>
				<string>meta.preprocessor.include.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?&gt;\\\s*\n)</string>
						<key>name</key>
						<string>punctuation.separator.continuation.pike</string>
          </dict>
					<dict>
						<key>begin</key>
						<string>\"</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.begin.pike</string>
              </dict>
            </dict>
						<key>end</key>
						<string>\"</string>
						<key>endCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.end.pike</string>
              </dict>
            </dict>
						<key>name</key>
						<string>string.quoted.double.include.pike</string>
          </dict>
					<dict>
						<key>begin</key>
						<string>&lt;</string>
						<key>beginCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.begin.pike</string>
              </dict>
            </dict>
						<key>end</key>
						<string>&gt;</string>
						<key>endCaptures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.string.end.pike</string>
              </dict>
            </dict>
						<key>name</key>
						<string>string.quoted.other.lt-gt.include.pike</string>
          </dict>
        </array>
      </dict>
			<dict>
				<key>begin</key>
				<string>^\s*#\s*(define|defined|elif|elseif|else|if|ifdef|ifndef|(line|[0-9]+)|pragma|undef|undefine|endif|charset|pike|string)\b</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>(?=(?://|/\*))|$</string>
				<key>name</key>
				<string>meta.preprocessor.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?&gt;\\\s*\n)</string>
						<key>name</key>
						<string>punctuation.separator.continuation.pike</string>
          </dict>
        </array>
      </dict>
			<dict>
				<key>include</key>
				<string>#block</string>
      </dict>
			<dict>
				<key>begin</key>
				<string>(?x)
        (?:  ^                                                    # begin-of-line
            |
             (?: (?= \s )           (?&lt;!else|return) (?&lt;=\w)    #  or word + space before name
               | (?= \s*[[:alnum:]_.] )        (?&lt;=[.|\(\)])   #  or type modifier before name
             )
        )
        (\s*) (?!(while|for|do|if|else|switch|catch|return|foreach|
                   object|int|float|function|mapping|array|multiset|
                   lambda|program|mixed|class)\s*)
        (
          (?:
            `\(\)|
            `[-&lt;.&gt;^|&amp;*~/+%=!\[\]]+|
            `[[:alpha:]_][[:alnum:]_]*+|
            [[:alpha:]_][[:alnum:]_]*+
          )++                                                     # actual name
        )
         \s*(?=\()</string>
				<key>beginCaptures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>punctuation.whitespace.function.leading.pike</string>
          </dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>entity.name.function.pike</string>
          </dict>
					<key>4</key>
					<dict>
						<key>name</key>
						<string>punctuation.definition.parameters.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>(?&lt;=\})|(?=#)|(;)</string>
				<key>name</key>
				<string>meta.function.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#comments</string>
          </dict>
					<dict>
						<key>include</key>
						<string>#parens</string>
          </dict>
					<dict>
						<key>match</key>
						<string>\bconstant\b</string>
						<key>name</key>
						<string>storage.modifier.pike</string>
          </dict>
					<dict>
						<key>include</key>
						<string>#block</string>
          </dict>
        </array>
      </dict>
    </array>
		<key>repository</key>
		<dict>
			<key>block</key>
			<dict>
				<key>begin</key>
				<string>\{</string>
				<key>end</key>
				<string>\}</string>
				<key>name</key>
				<string>meta.block.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#block_innards</string>
          </dict>
        </array>
      </dict>
			<key>block_innards</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>punctuation.whitespace.function-call.leading.pike</string>
              </dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>support.function.any-method.pike</string>
              </dict>
							<key>3</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.parameters.pike</string>
              </dict>
            </dict>
						<key>match</key>
						<string>(?x)
                     (?: (?= \s )  (?:(?&lt;=else|new|return) | (?&lt;!\w)) (\s+))?
                     (\b
                      (?!(while|for|do|if|else|foreach|lambda|switch|
                          catch|enumerate|return|
                          mapping|multiset|mixed|int|float|class|function|array|
                          string|program|object)\s*\()
                        (?: `\(\)|
                            `[-&lt;.&gt;^|&amp;*~/+%=!\[\]]+|
                            `[[:alnum:]_]|
                            [[:alpha:]_][[:alnum:]_]*+\b
                        )++    # actual name
                     )
                     \s*(\()</string>
						<key>name</key>
						<string>meta.function-call.pike</string>
          </dict>
					<dict>
						<key>include</key>
						<string>#block</string>
          </dict>
					<dict>
						<key>include</key>
						<string>$base</string>
          </dict>
        </array>
      </dict>
			<key>comments</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>/\*</string>
						<key>captures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.pike</string>
              </dict>
            </dict>
						<key>end</key>
						<string>\*/</string>
						<key>name</key>
						<string>comment.block.pike</string>
          </dict>
					<dict>
						<key>begin</key>
						<string>//!(.*?)</string>
						<key>captures</key>
						<dict>
							<key>0</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.pike</string>
              </dict>
            </dict>
						<key>end</key>
						<string>^\s*(?!//!)</string>
						<key>name</key>
						<string>comment.block.documentation.pikedoc.pike</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#pike_doc</string>
              </dict>
            </array>
          </dict>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>punctuation.definition.comment.pike</string>
              </dict>
            </dict>
						<key>match</key>
						<string>(//).*$\n?</string>
						<key>name</key>
						<string>comment.line.double-slash.pike</string>
          </dict>
        </array>
      </dict>
			<key>disabled</key>
			<dict>
				<key>begin</key>
				<string>^\s*#\s*if(n?def)?\b.*$</string>
				<key>comment</key>
				<string>eat nested preprocessor if(def)s</string>
				<key>end</key>
				<string>^\s*#\s*endif\b.*$</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#disabled</string>
          </dict>
					<dict>
						<key>include</key>
						<string>#pragma-mark</string>
          </dict>
        </array>
      </dict>
			<key>parens</key>
			<dict>
				<key>begin</key>
				<string>\(</string>
				<key>end</key>
				<string>\)</string>
				<key>name</key>
				<string>meta.parens.pike</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>$base</string>
          </dict>
        </array>
      </dict>
			<key>pike_doc</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>keyword.other.pikedoc.pike</string>
              </dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>meta.function.pike</string>
              </dict>
            </dict>
						<key>match</key>
						<string>(@decl)\s+(.+?)$</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>$base</string>
              </dict>
							<dict>
								<key>include</key>
								<string>#block_innards</string>
              </dict>
            </array>
          </dict>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>keyword.other.pikedoc.pike</string>
              </dict>
            </dict>
						<key>match</key>
						<string>(?x)
            (@
              (
                \[.*?\]|                # @[word]
                [[:alnum:]]+\{.*?@\}|   # @word{something@}
                [[:alnum:]]+\{.*?        # @pre{Multiline content
              )
              |
              (@)\}                      # @} closes multiline content
            )
          </string>
						<key>name</key>
						<string>meta.tag.inline.pikedoc.pike</string>
          </dict>
					<dict>
						<key>match</key>
						<string>((https?|s?ftp|ftps|file|smb|afp|nfs|(x-)?man|gopher|txmt)://|mailto:)[-:@a-zA-Z0-9_.~%+/?=&amp;#]+(?&lt;![.?:])</string>
						<key>name</key>
						<string>markup.underline.link.pike</string>
          </dict>
					<dict>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>keyword.other.pikedoc.pike</string>
              </dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>markup.underline.link.pike</string>
              </dict>
            </dict>
						<key>match</key>
						<string>(@link)\s+(.+)\s*$</string>
          </dict>
					<dict>
						<key>match</key>
						<string>(?x)
                   \@(
                      param|mapping|endmapping|returns|seealso|item|dl|enddl|
                      note|module|endmodule|member|example|see|throws|pre|xml|
                      i|b|ref|ul|endul|code|endcode|int|endint|value|
                      string|endstring|array|endarray
                   )\b</string>
						<key>name</key>
						<string>keyword.other.pikedoc.pike</string>
          </dict>
        </array>
      </dict>
			<key>pragma-mark</key>
			<dict>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.pragma.pike</string>
          </dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>meta.toc-list.pragma-mark.pike</string>
          </dict>
        </dict>
				<key>match</key>
				<string>^\s*(#\s*(pragma\s+mark)\s+(.*))</string>
				<key>name</key>
				<string>meta.section</string>
      </dict>
			<key>preprocessor-rule-disabled</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0)\b).*</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.pike</string>
          </dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b)</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.pike</string>
              </dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.pike</string>
              </dict>
            </dict>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>$base</string>
              </dict>
            </array>
          </dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>name</key>
						<string>comment.block.preprocessor.if-branch</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
              </dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
			<key>preprocessor-rule-disabled-block</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0)\b).*</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.pike</string>
          </dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b)</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.pike</string>
              </dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.pike</string>
              </dict>
            </dict>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#block_innards</string>
              </dict>
            </array>
          </dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>name</key>
						<string>comment.block.preprocessor.if-branch.in-block</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
              </dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
			<key>preprocessor-rule-enabled</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0*1)\b)</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.pike</string>
          </dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b).*</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.pike</string>
              </dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.pike</string>
              </dict>
            </dict>
						<key>contentName</key>
						<string>comment.block.preprocessor.else-branch</string>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
              </dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
              </dict>
            </array>
          </dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>$base</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
			<key>preprocessor-rule-enabled-block</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#(if)\s+(0*1)\b)</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.if.pike</string>
          </dict>
					<key>3</key>
					<dict>
						<key>name</key>
						<string>constant.numeric.preprocessor.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b)</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>begin</key>
						<string>^\s*(#\s*(else)\b).*</string>
						<key>captures</key>
						<dict>
							<key>1</key>
							<dict>
								<key>name</key>
								<string>meta.preprocessor.pike</string>
              </dict>
							<key>2</key>
							<dict>
								<key>name</key>
								<string>keyword.control.import.else.pike</string>
              </dict>
            </dict>
						<key>contentName</key>
						<string>comment.block.preprocessor.else-branch.in-block</string>
						<key>end</key>
						<string>(?=^\s*#\s*endif\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#disabled</string>
              </dict>
							<dict>
								<key>include</key>
								<string>#pragma-mark</string>
              </dict>
            </array>
          </dict>
					<dict>
						<key>begin</key>
						<string></string>
						<key>end</key>
						<string>(?=^\s*#\s*(else|endif)\b.*$)</string>
						<key>patterns</key>
						<array>
							<dict>
								<key>include</key>
								<string>#block_innards</string>
              </dict>
            </array>
          </dict>
        </array>
      </dict>
			<key>preprocessor-rule-other</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b).*$</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>$base</string>
          </dict>
        </array>
      </dict>
			<key>preprocessor-rule-other-block</key>
			<dict>
				<key>begin</key>
				<string>^\s*(#\s*(if(n?def)?)\b.*?(?:(?=(?://|/\*))|$))</string>
				<key>captures</key>
				<dict>
					<key>1</key>
					<dict>
						<key>name</key>
						<string>meta.preprocessor.pike</string>
          </dict>
					<key>2</key>
					<dict>
						<key>name</key>
						<string>keyword.control.import.pike</string>
          </dict>
        </dict>
				<key>end</key>
				<string>^\s*(#\s*(endif)\b).*$</string>
				<key>patterns</key>
				<array>
					<dict>
						<key>include</key>
						<string>#block_innards</string>
          </dict>
        </array>
      </dict>
			<key>string_escaped_char</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>\\(\\|[0-3]\d{,2}|[4-7]\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|d[0-9]+|[[:alnum:]'"?])</string>
						<key>name</key>
						<string>constant.character.escape.pike</string>
          </dict>
					<dict>
						<key>match</key>
						<string>\\.</string>
						<key>name</key>
						<string>invalid.illegal.unknown-escape.pike</string>
          </dict>
        </array>
      </dict>
			<key>string_placeholder</key>
			<dict>
				<key>patterns</key>
				<array>
					<dict>
						<key>match</key>
						<string>(?x)%
                  (?!\s|%)                            # Not followed by space or %
                  \*?                                 # May be followed by a *
                  (\d+\$)?                           # field (argument #)
                  [*#0\- +'\[\]]*                   # flags
                  [,;:_]?                              # separator character (AltiVec)
                  ((-?\d+)|\*(-?\d+\$)?)?          # minimum field width
                  (\.((-?\d+)|\*(-?\d+\$)?)?)?    # precision
                  (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)? # length modifier
                  [diouxXDOUeEfFgGaACcSspn%{}]         # conversion type</string>
						<key>name</key>
						<string>constant.other.placeholder.pike</string>
          </dict>
					<dict>
						<key>match</key>
						<string>%(?!\s|%)(!&lt;%)</string>
						<key>name</key>
						<string>invalid.illegal.placeholder.pike</string>
          </dict>
        </array>
      </dict>
    </dict>
		<key>scopeName</key>
		<string>source.pike</string>
		<key>uuid</key>
		<string>f0c5f4ad-3e8a-4add-9ebf-2ce1d5e5262f</string>
  </dict>
</plist>